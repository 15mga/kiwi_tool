package kiwi

import (
	"fmt"
	"go/format"
	"os"
)

type IWriter interface {
	setBuilder(builder *builder)
	Builder() *builder
	Module() string
	Dirty() bool
	SetDirty(bool)
	WriteHeader()
	WriteMsg(idx int, msg *Msg) error
	WriteFooter()
	SetSvc(svc *svc)
	Svc() *svc
	Reset()
	Save() error
}

type baseWriter struct {
	bdr   *builder
	dirty bool
	svc   *svc
}

func (w *baseWriter) setBuilder(builder *builder) {
	w.bdr = builder
}

func (w *baseWriter) Builder() *builder {
	return w.bdr
}

func (w *baseWriter) WriteHeader() {

}

func (w *baseWriter) WriteMsg(idx int, msg *Msg) error {
	return nil
}

func (w *baseWriter) WriteFooter() {

}

func (w *baseWriter) Reset() {

}

func (w *baseWriter) Save() error {
	//TODO implement me
	panic("implement me")
}

func (w *baseWriter) Module() string {
	return w.bdr.module
}

func (w *baseWriter) Dirty() bool {
	return w.dirty
}

func (w *baseWriter) SetDirty(dirty bool) {
	w.dirty = dirty
}

func (w *baseWriter) SetSvc(svc *svc) {
	w.svc = svc
}

func (w *baseWriter) Svc() *svc {
	return w.svc
}

func (w *baseWriter) save(path, data string) error {
	f := w.bdr.plugin.NewGeneratedFile(path, "test")
	data = "// Code generated by protoc-gen-go-kiwi. DO NOT EDIT.\n\n" + data
	bytes, _ := format.Source([]byte(data))
	_, e := f.Write(bytes)
	if e != nil {
		return e
	}
	return nil
}

func (w *baseWriter) saveCustom(path, data string) error {
	data = "// Code generated by protoc-gen-go-kiwi. DO NOT EDIT.\n\n" + data
	e := os.WriteFile(fmt.Sprintf("../%s", path), []byte(data), os.ModePerm)
	if e != nil {
		return e
	}
	return nil
}
